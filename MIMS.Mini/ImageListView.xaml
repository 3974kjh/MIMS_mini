<UserControl x:Class="MIMS.Mini.ImageListView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:MIMS.Mini"      
             xmlns:defines="clr-namespace:MIMS.Mini.Defines"      
             mc:Ignorable="d" 
             d:DesignHeight="500" d:DesignWidth="500" Loaded="UserControl_Loaded" Unloaded="UserControl_Unloaded">
    <UserControl.Resources>
        <Style TargetType="{x:Type Button}">
            <Setter Property="Background" Value="#FF546E95" />
            <Setter Property="Foreground" Value="GhostWhite" />
            <Setter Property="FontSize" Value="14" />
            <Setter Property="SnapsToDevicePixels" Value="True" />

            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Cursor="Hand" CornerRadius="3" BorderThickness="1" BorderBrush="Gray" Background="{TemplateBinding Background}">
                            <Grid>
                                <ContentPresenter x:Name="MyContentPresenter" Content="{TemplateBinding Content}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" />
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="#FF98AFD1" />
                                <Setter Property="Foreground" Value="White" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="#FF314057" />
                                <Setter Property="Foreground" Value="White" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style TargetType="ToggleButton">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="Border" Background="{TemplateBinding Background}">
                            <ContentPresenter Margin="{TemplateBinding Padding}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="CheckBoxFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Border>
                            <Rectangle 
            Margin="15,0,0,0"
            StrokeThickness="1"
            Stroke="#60000000"
            StrokeDashArray="1 2"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <LinearGradientBrush x:Key="NormalBrush" StartPoint="0,0" EndPoint="0,1">
            <GradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Color="#FFF" Offset="0.0"/>
                    <GradientStop Color="#CCC" Offset="1.0"/>
                </GradientStopCollection>
            </GradientBrush.GradientStops>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="HorizontalNormalBrush" StartPoint="0,0" EndPoint="1,0">
            <GradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Color="#FFF" Offset="0.0"/>
                    <GradientStop Color="#CCC" Offset="1.0"/>
                </GradientStopCollection>
            </GradientBrush.GradientStops>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="LightBrush" StartPoint="0,0" EndPoint="0,1">
            <GradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Color="#FFF" Offset="0.0"/>
                    <GradientStop Color="#EEE" Offset="1.0"/>
                </GradientStopCollection>
            </GradientBrush.GradientStops>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="HorizontalLightBrush" StartPoint="0,0" EndPoint="1,0">
            <GradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Color="#FFF" Offset="0.0"/>
                    <GradientStop Color="#EEE" Offset="1.0"/>
                </GradientStopCollection>
            </GradientBrush.GradientStops>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="DarkBrush" StartPoint="0,0" EndPoint="0,1">
            <GradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Color="#FFF" Offset="0.0"/>
                    <GradientStop Color="#AAA" Offset="1.0"/>
                </GradientStopCollection>
            </GradientBrush.GradientStops>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
            <GradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Color="#BBB" Offset="0.0"/>
                    <GradientStop Color="#EEE" Offset="0.1"/>
                    <GradientStop Color="#EEE" Offset="0.9"/>
                    <GradientStop Color="#FFF" Offset="1.0"/>
                </GradientStopCollection>
            </GradientBrush.GradientStops>
        </LinearGradientBrush>

        <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />

        <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" />

        <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF" />

        <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#DDD" />

        <!-- Border Brushes -->

        <LinearGradientBrush x:Key="NormalBorderBrush" StartPoint="0,0" EndPoint="0,1">
            <GradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Color="#CCC" Offset="0.0"/>
                    <GradientStop Color="#444" Offset="1.0"/>
                </GradientStopCollection>
            </GradientBrush.GradientStops>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="HorizontalNormalBorderBrush" StartPoint="0,0" EndPoint="1,0">
            <GradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Color="#CCC" Offset="0.0"/>
                    <GradientStop Color="#444" Offset="1.0"/>
                </GradientStopCollection>
            </GradientBrush.GradientStops>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="DefaultedBorderBrush" StartPoint="0,0" EndPoint="0,1">
            <GradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Color="#777" Offset="0.0"/>
                    <GradientStop Color="#000" Offset="1.0"/>
                </GradientStopCollection>
            </GradientBrush.GradientStops>
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="PressedBorderBrush" StartPoint="0,0" EndPoint="0,1">
            <GradientBrush.GradientStops>
                <GradientStopCollection>
                    <GradientStop Color="#444" Offset="0.0"/>
                    <GradientStop Color="#888" Offset="1.0"/>
                </GradientStopCollection>
            </GradientBrush.GradientStops>
        </LinearGradientBrush>

        <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" />

        <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />

        <SolidColorBrush x:Key="LightBorderBrush" Color="#AAA" />

        <!-- Miscellaneous Brushes -->
        <SolidColorBrush x:Key="GlyphBrush" Color="#444" />

        <SolidColorBrush x:Key="LightColorBrush" Color="#DDD" />
        <Style x:Key="{x:Type CheckBox}" TargetType="CheckBox">
            <Setter Property="SnapsToDevicePixels" Value="true"/>
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="FocusVisualStyle"    Value="{StaticResource CheckBoxFocusVisual}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="CheckBox">
                        <BulletDecorator Background="Transparent">
                            <BulletDecorator.Bullet>
                                <Border x:Name="Border"  
              Width="16" 
              Height="16" 
              CornerRadius="0"
              Cursor="Hand"
              Background="{StaticResource NormalBrush}"
              BorderThickness="1"
              BorderBrush="{StaticResource NormalBorderBrush}">
                                    <Path 
                Width="10" Height="10" 
                x:Name="CheckMark"
                SnapsToDevicePixels="False"
                Stroke="{StaticResource DefaultedBorderBrush}"
                StrokeThickness="2"
                Data="M 0 2 L 10 20 M 0 17 L 10 0" />
                                </Border>
                            </BulletDecorator.Bullet>
                            <ContentPresenter Margin="5,-2,0,10"
            VerticalAlignment="Center"
            HorizontalAlignment="Left"
            RecognizesAccessKey="True"/>
                        </BulletDecorator>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="false">
                                <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="{x:Null}">
                                <Setter TargetName="CheckMark" Property="Data" Value="M 0 7 L 7 0" />
                                <!--<Setter Property="Foreground" Value="blue" />-->
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource DarkBrush}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource PressedBrush}" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource PressedBorderBrush}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource DisabledBackgroundBrush}" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource DisabledBorderBrush}" />
                                <Setter Property="Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style  TargetType="{x:Type RadioButton}" >
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <BulletDecorator Background="GhostWhite" Cursor="Hand">
                            <BulletDecorator.Bullet>
                                <Grid Height="16" Width="16">
                                    <!--Define size of the Bullet-->
                                    <!--The two borders-->
                                    <Border Name="RadioOuter" Background="Transparent" BorderBrush="Gray" BorderThickness="1" CornerRadius="1"/>
                                    <Border CornerRadius="0" Margin="4" Name="RadioMark" Background="Black" Visibility="Hidden"/>
                                </Grid>
                            </BulletDecorator.Bullet>
                            <!--Text element-->
                            <TextBlock Margin="5,0,0,0" Foreground="Black" FontSize="15">
                        <ContentPresenter/>
                            </TextBlock>
                        </BulletDecorator>
                        <!--If item is checked, trigger the visibility of the mark-->
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="true">
                                <!--If item is checked, trigger the visibility of the mark and change the color of the selected bullet into a darker gray for better highlighting-->
                                <Setter TargetName="RadioMark" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="RadioOuter" Property="BorderBrush" Value="black" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </UserControl.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <Grid Grid.Row="0" Margin="0,0,0,10" Background="#FF546E95">
            <Label Content="환자 영상 리스트" FontSize="14" Width="auto" HorizontalAlignment="Left" FontWeight="Bold" VerticalAlignment="Bottom" Margin="5,3,0,2" Foreground="FloralWhite"/>
        </Grid>
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto"/>
                <ColumnDefinition Width="10"/>
                <ColumnDefinition/>
            </Grid.ColumnDefinitions>
            <Grid Grid.Column="0">
                <Grid.Style>
                    <Style TargetType="{x:Type Grid}">
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ElementName=xToggleBtn, Path=IsChecked}" Value="True">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ElementName=xToggleBtn, Path=IsChecked}" Value="False">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Grid.Style>
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                </Grid.RowDefinitions>
                <Border Grid.Row="0" Margin="10,0,0,0" BorderBrush="Black" BorderThickness="0.5">
                    <Grid Background="GhostWhite">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Label Grid.Row="0" FontSize="14" Content="모달리티" Width="110" HorizontalAlignment="Left" FontWeight="Bold" Foreground="FloralWhite" Background="#FF314057" Height="auto" VerticalAlignment="Bottom"/>
                        <StackPanel Grid.Row="1" Orientation="Vertical" HorizontalAlignment="Left" Margin="8,10,0,0">
                            <CheckBox IsChecked="{Binding Total}" Command="{Binding TotalCommand}" Content="전체" Width="70" Height="30" Foreground="Black" FontSize="15"/>
                            <CheckBox IsChecked="{Binding Xray}" Command="{Binding XrayCommand}" Content="X-Ray" Width="70" Height="30" Foreground="Black" FontSize="15" />
                            <CheckBox IsChecked="{Binding Ct}" Command="{Binding CtCommand}" Content="CT" Width="70" Height="30" Foreground="Black" FontSize="15"/>
                            <CheckBox IsChecked="{Binding Mri}" Command="{Binding MriCommand}" Content="MRI" Width="70" Height="30" Foreground="Black" FontSize="15"/>
                        </StackPanel>
                    </Grid>
                </Border>
                <Border Grid.Row="1" BorderBrush="Black" BorderThickness="0.5" Margin="10,10,0,10">
                    <Grid Background="GhostWhite">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Label Grid.Row="0" FontSize="14" Content="날짜 정렬" Width="110" HorizontalAlignment="Left" FontWeight="Bold" VerticalAlignment="Bottom" Foreground="FloralWhite" Background="#FF314057"/>
                        <StackPanel Grid.Row="1" Orientation="Vertical" Margin="5,10,0,5">
                            <RadioButton IsChecked="{Binding IsDescendingOrder}" Content="내림차순" Width="80" Height="30" Foreground="Black" FontSize="15" Margin="0,0,20,0" Command="{Binding DescendingOrderCommand}"/>
                            <RadioButton Content="오름차순" Width="80" Height="30" Foreground="Black" FontSize="15" Margin="0,0,20,-5" Command="{Binding AscendingOrderCommand}"/>
                        </StackPanel>
                    </Grid>
                </Border>
                <Border Grid.Row="2" Margin="10,0,0,0" BorderBrush="Black" BorderThickness="0.5">
                    <Grid Background="GhostWhite">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Label Grid.Row="0" FontSize="14" Content="파일 업로드" Width="110" HorizontalAlignment="Left" FontWeight="Bold" VerticalAlignment="Bottom" Foreground="FloralWhite" Background="#FF314057"/>
                        <StackPanel Grid.Row="1" Orientation="Vertical" Margin="0,10,0,0">
                            <RadioButton IsChecked="{Binding IsXray}" Content="X-Ray 파일" Width="95" Height="30" Foreground="Black" FontSize="15"/>
                            <RadioButton IsChecked="{Binding IsCt}" Content="CT 파일" Width="95" Height="30" Foreground="Black" FontSize="15"/>
                            <RadioButton IsChecked="{Binding IsMri}" Content="MRI 파일" Width="95" Height="30" Foreground="Black" FontSize="15"/>
                            <Button Content="업로드" Width="95" Height="30" FontSize="15" Margin="0,5,0,10" Command="{Binding GetFileCommand}"/>
                        </StackPanel>
                    </Grid>
                </Border>
            </Grid>
            <ToggleButton Grid.Column="1" x:Name="xToggleBtn" Height="auto" Margin="0,0,0,15" Background="white">
                <Image x:Name="xImage" Stretch="Uniform">
                    <Image.Style>
                        <Style TargetType="Image">
                            <Setter Property="Source" Value="imageicon/outimage.png"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding ElementName=xToggleBtn, Path=IsChecked}" Value="True">
                                    <Setter Property="Source" Value="imageicon/outimage.png"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ElementName=xToggleBtn, Path=IsChecked}" Value="False">
                                    <Setter Property="Source" Value="imageicon/inimage.png"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>
            </ToggleButton>
            <ListBox x:Name="ImageList" Background="GhostWhite" ItemsSource="{Binding ImageInfoList}" SelectedItem="{Binding SelectedImage}" ScrollViewer.HorizontalScrollBarVisibility="Disabled" Grid.Column="2" Margin="0,0,10,10" ScrollViewer.VerticalScrollBarVisibility="Auto">
                <ListBox.ItemContainerStyle>
                    <Style TargetType="ListBoxItem">
                        <EventSetter Event="MouseDoubleClick" Handler="ListBoxItem_MouseDoubleClick"/>
                    </Style>
                </ListBox.ItemContainerStyle>
                <ListBox.ItemsPanel>
                    <ItemsPanelTemplate>
                        <WrapPanel Orientation="Horizontal"/>
                    </ItemsPanelTemplate>
                </ListBox.ItemsPanel>
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <Grid Height="150" Width="100">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="115"/>
                                <RowDefinition Height="auto"/>
                            </Grid.RowDefinitions>
                            <Grid Grid.Row="0" Name="ImageGrid" Background="Black">
                                <Image Source="{Binding ThumbnailImage}"/>
                                <Grid Background="Transparent">
                                    <Grid.Style>
                                        <Style TargetType="{x:Type Grid}">
                                            <Setter Property="Visibility" Value="Hidden"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding ElementName=ImageGrid, Path=IsMouseOver}" Value="true">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Grid.Style>
                                    <Button Width="30" Height="30" HorizontalAlignment="Right" VerticalAlignment="Top" Command="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}, Path=DataContext.DeleteOneCommand}" CommandParameter="{Binding}">
                                        <Button.Background>
                                            <ImageBrush ImageSource="imageicon/삭제1.PNG"/>
                                        </Button.Background>
                                    </Button>
                                </Grid>
                            </Grid>
                            <StackPanel Grid.Row="1" Orientation="Vertical" Background="Black">
                                <Label Content="{Binding ShowImageDate}" Foreground="FloralWhite"  HorizontalAlignment="Center"/>
                            </StackPanel>
                        </Grid>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>
        </Grid>
    </Grid>
</UserControl>
